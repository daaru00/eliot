
# Service specifications

service: eliot
frameworkVersion: ">=1.42.0 <2.0.0"

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-dynamodb
  - serverless-plugin-share

package:
  exclude:
    - 'credentials.yml'
    - 'modules/**'

# Configurations

custom: 
  stage: iot
  region: eu-west-1
  credentials: ${file(./credentials.yml)}
  share: ${file(./share.yml)}
  skipTablePolicy: true
  tables:
    authCodes:
      name: ${self:service}-${self:provider.stage}-authCodes
      primaryKey:
        name: authCode
        type: 'S'
      ttl: 
        attribute: ttl
    refreshTokens:
      name: ${self:service}-${self:provider.stage}-refreshTokens
      primaryKey:
        name: provider
        type: 'S'
      rangeKey:
        name: refreshToken
        type: 'S'
    accessTokens:
      name: ${self:service}-${self:provider.stage}-accessTokens
      primaryKey:
        name: provider
        type: 'S'
      rangeKey:
        name: accessToken
        type: 'S'
      ttl: 
        attribute: ttl

# Provider

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,self:custom.stage}
  region: ${opt:region,self:custom.region}

# Functions

functions:
  auth:
    handler: auth/auth.handler
    environment:
      CLIENT_ID: 
        Ref: ClientId
      GOOGLE_PROJECT_ID:
        Ref: GoogleProjectId
      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: 
          - "Fn::GetAtt": ["TableAuthCodes", "Arn"]
    events:
      - http:
          path: auth
          method: get

  token:
    handler: auth/token.handler
    environment:
      CLIENT_ID: 
        Ref: ClientId
      CLIENT_SECRET: 
        Ref: ClientSecret
      TABLE_AUTH_CODES: ${self:custom.tables.authCodes.name}
      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}
      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: 
          - "Fn::GetAtt": ["TableAuthCodes", "Arn"]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: 
          - "Fn::GetAtt": ["TableRefreshTokens", "Arn"]
          - "Fn::GetAtt": ["TableAccessTokens", "Arn"]
    events:
      - http:
          path: token
          method: post

  authorizer:
    handler: auth/authorizer.handler
    environment:
      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - "Fn::GetAtt": ["TableAccessTokens", "Arn"]

  googleHome:
    handler: googleHome/fulfillment.handler
    environment:
      ACCOUNT_ID:
        Ref: AWS::AccountId
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:ListThings
          - iot:DescribeEndpoint
          - iot:DescribeThing
          - iot:GetThingShadow
          - iot:UpdateThingShadow
        Resource: '*'
    events:
      - http:
          path: google/fulfillment
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
  
  googleHomeResync:
    handler: googleHome/resync.handler
    environment:
      ACCOUNT_ID:
        Ref: AWS::AccountId
      GOOGLE_APY_KEY:
        Ref: GoogleAPIKey
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/thing/#'"
          enabled: true

  googleHomeReport:
    handler: googleHome/report.handler
    environment:
      ACCOUNT_ID:
        Ref: AWS::AccountId
      GOOGLE_JWT:
        Ref: GoogleJWT
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:DescribeEndpoint
          - iot:DescribeThing
          - iot:GetThingShadow
          - iot:UpdateThingShadow
        Resource: '*'
    events:
      - iot:
          sql: "SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''"
          enabled: true

  alexa:
    handler: alexa/fulfillment.handler
    environment:
      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}
      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}
      ALEXA_CLIENT_ID:
        Ref: AlexaClientId
      ALEXA_CLIENT_SECRET:
        Ref: AlexaClientSecret
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - "Fn::GetAtt": ["TableAccessTokens", "Arn"]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - "Fn::GetAtt": ["TableRefreshTokens", "Arn"]
      - Effect: Allow
        Action:
          - iot:ListThings
          - iot:DescribeEndpoint
          - iot:DescribeThing
          - iot:GetThingShadow
          - iot:UpdateThingShadow
        Resource: '*'
  
  alexaResync:
    handler: alexa/resync.handler
    environment:
      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}
      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}
      ALEXA_CLIENT_ID:
        Ref: AlexaClientId
      ALEXA_CLIENT_SECRET:
        Ref: AlexaClientSecret
      ALEXA_ENDPOINT:
        Ref: AlexaEndpoint
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - "Fn::GetAtt": ["TableAccessTokens", "Arn"]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - "Fn::GetAtt": ["TableRefreshTokens", "Arn"]
      - Effect: Allow
        Action:
          - iot:ListThings
        Resource: '*'
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/thing/#'"
          enabled: true
  
  alexaReport:
    handler: alexa/report.handler
    environment:
      TABLE_REFRESH_TOKENS: ${self:custom.tables.refreshTokens.name}
      TABLE_ACCESS_TOKENS: ${self:custom.tables.accessTokens.name}
      ALEXA_CLIENT_ID:
        Ref: AlexaClientId
      ALEXA_CLIENT_SECRET:
        Ref: AlexaClientSecret
      ALEXA_ENDPOINT:
        Ref: AlexaEndpoint
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 
          - "Fn::GetAtt": ["TableAccessTokens", "Arn"]
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - "Fn::GetAtt": ["TableRefreshTokens", "Arn"]
      - Effect: Allow
        Action:
          - iot:DescribeEndpoint
          - iot:DescribeThing
          - iot:GetThingShadow
          - iot:UpdateThingShadow
        Resource: '*'
    events:
      - iot:
          sql: "SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''"
          enabled: true

# Resources

resources:
  - ${file(parameters.yml)}
  - ${file(resources.yml)}
  - ${file(outputs.yml)}
