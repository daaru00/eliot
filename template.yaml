AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Synchronize IoT Things to Google Home and Alexa

##
# Template Metadata
##

Metadata:
  AWS::ServerlessRepo::Application:
    Name: eliot
    Description: Google Home and Alexa sync with IoT Core
    Author: Fabio Gollinucci
    SpdxLicenseId: GPL-3.0-only
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['alexa', 'google', 'google-home', 'google-assistant', 'iot', 'iot-core', 'home-automation']
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "OAuth2 Credentials"
        Parameters: 
          - ClientId
          - ClientSecret
      - Label: 
          default: "Google Home"
        Parameters: 
          - GoogleProjectId
          - GoogleAPIKey
          - GoogleJWT
      - Label: 
          default: "Alexa"
        Parameters: 
          - AlexaSkillId
          - AlexaClientId
          - AlexaClientSecret
          - AlexaEndpoint

##
# Global Options
##

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 6
    CodeUri: ./

##
# Template Parameters
##

Parameters:
  ClientId:
    Type: String 
    Description: "OAuth2 client ID"
    MinLength: 20
    AllowedPattern: ".+"
    ConstraintDescription: "Client ID is required and must have at least 20 chars"
  ClientSecret:
    Type: String
    Description: "OAuth2 client secret"
    MinLength: 40
    AllowedPattern: ".+"
    ConstraintDescription: "Client secret is required and must have at least 40 chars"
  GoogleProjectId:
    Type: String
    Description: "Google Project ID"
  GoogleAPIKey:
    Type: String
    Description: "Google API key"
  GoogleJWT:
    Type: String
    Description: "Google JWT token"
  AlexaSkillId:
    Type: String
    Description: "Alexa Skill ID"
  AlexaClientId:
    Type: String
    Description: "Alexa Client ID"
  AlexaClientSecret:
    Type: String
    Description: "Alexa Client Secret"
  AlexaEndpoint:
    Type: String
    Description: "Alexa Endpoint"
    Default: "Europe"
    AllowedValues: 
      - NorthAmerica
      - Europe
      - FarEast

##
# Flag Conditions
##

Conditions: 
  IsAlexaActive: !Not [!Equals [!Ref "AlexaSkillId", ""]]
  IsGoogleHomeActive: !Not [!Equals [!Ref "GoogleProjectId", ""]]

##
# Auth Resources
##

Resources:
  AuthEndpointApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Eliot auth endpoint
      StageName: oauth2

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/auth.handler
      Environment:
        Variables:
          CLIENT_ID: !Ref ClientId
          GOOGLE_PROJECT_ID: !Ref GoogleProjectId
          TABLE_AUTH_CODES: !Ref AuthCodesTable
      Events:
        HttpGet:
          Type: Api
          Properties:
            RestApiId: !Ref AuthEndpointApiGateway
            Path: authorization
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt AuthCodesTable.Arn

  AuthLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - AuthEndpointApiGateway
      - AuthFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthFunction
      Principal: apigateway.amazonaws.com

  TokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/token.handler
      Environment:
        Variables:
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          TABLE_AUTH_CODES: !Ref AuthCodesTable
          TABLE_REFRESH_TOKENS: !Ref RefreshTokensTable
          TABLE_ACCESS_TOKENS: !Ref AccessTokensTable
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref AuthEndpointApiGateway
            Path: token
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
              Resource: !GetAtt AuthCodesTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: 
                - !GetAtt RefreshTokensTable.Arn
                - !GetAtt AccessTokensTable.Arn

  TokenLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - AuthEndpointApiGateway
      - TokenFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TokenFunction
      Principal: apigateway.amazonaws.com

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/authorizer.handler
      Environment:
        Variables:
          TABLE_ACCESS_TOKENS: !Ref AccessTokensTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !GetAtt AccessTokensTable.Arn

  AuthCodesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: authCode
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: authCode
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  RefreshTokensTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: provider
          AttributeType: 'S'
        - AttributeName: refreshToken
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: provider
          KeyType: HASH
        - AttributeName: refreshToken
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  AccessTokensTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: provider
          AttributeType: 'S'
        - AttributeName: accessToken
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: provider
          KeyType: HASH
        - AttributeName: accessToken
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

##
# Google Home Resources
##

  GoogleHomeEndpointApiGateway:
    Type: AWS::Serverless::Api
    Condition: IsGoogleHomeActive
    Properties:
      Name: Eliot Google Home sync endpoint
      StageName: google
      Auth:
        Authorizers:
          OAuth2Authorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 300
              ValidationExpression: Bearer.*
        DefaultAuthorizer: OAuth2Authorizer

  GoogleHomeFulfillmentFunction:
    Type: AWS::Serverless::Function
    Condition: IsGoogleHomeActive
    Properties:
      Handler: google-home/fulfillment.handler
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        HttpPost:
          Type: Api
          Properties:
            RestApiId: !Ref GoogleHomeEndpointApiGateway
            Path: fulfillment
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iot:ListThings
                - iot:DescribeEndpoint
                - iot:DescribeThing
                - iot:GetThingShadow
                - iot:UpdateThingShadow
              Resource: '*'

  GoogleHomeFulfillmentLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - GoogleHomeEndpointApiGateway
      - GoogleHomeFulfillmentFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GoogleHomeFulfillmentFunction
      Principal: apigateway.amazonaws.com

  GoogleHomeReSyncFunction:
    Type: AWS::Serverless::Function
    Condition: IsGoogleHomeActive
    Properties:
      Handler: google-home/resync.handler
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          GOOGLE_APY_KEY: !Ref GoogleAPIKey
      Events:
        IoTAllThingsEvent:
          Type: IoTRule
          Properties:
            Sql: "SELECT * FROM '$aws/events/thing/#'"

  GoogleHomeReportFunction:
    Type: AWS::Serverless::Function
    Condition: IsGoogleHomeActive
    Properties:
      Handler: google-home/report.handler
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          GOOGLE_JWT: !Ref GoogleJWT
      Events:
        IoTAllUpdateAccepted:
          Type: IoTRule
          Properties:
            Sql: "SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iot:DescribeEndpoint
                - iot:DescribeThing
                - iot:GetThingShadow
                - iot:UpdateThingShadow
              Resource: '*'

##
# Alexa Resources
##

  AlexaFulfillmentFunction:
    Type: AWS::Serverless::Function
    Condition: IsAlexaActive
    Properties:
      Handler: alexa/fulfillment.handler
      Environment:
        Variables:
          TABLE_REFRESH_TOKENS: !Ref RefreshTokensTable
          TABLE_ACCESS_TOKENS: !Ref AccessTokensTable
          ALEXA_CLIENT_ID: !Ref AlexaClientId
          ALEXA_CLIENT_SECRET: !Ref AlexaClientSecret
      Events:
        Alexa:
          Type: AlexaSkill
          Properties:
            SkillId: !Ref AlexaSkillId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt RefreshTokensTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource: !GetAtt AccessTokensTable.Arn
            - Effect: Allow
              Action:
                - iot:ListThings
                - iot:DescribeEndpoint
                - iot:DescribeThing
                - iot:GetThingShadow
                - iot:UpdateThingShadow
              Resource: '*'

  AlexaReSyncFunction:
    Type: AWS::Serverless::Function
    Condition: IsAlexaActive
    Properties:
      Handler: alexa/resync.handler
      Environment:
        Variables:
          TABLE_REFRESH_TOKENS: !Ref RefreshTokensTable
          TABLE_ACCESS_TOKENS: !Ref AccessTokensTable
          ALEXA_CLIENT_ID: !Ref AlexaClientId
          ALEXA_CLIENT_SECRET: !Ref AlexaClientSecret
          ALEXA_ENDPOINT: !Ref AlexaEndpoint
      Events:
        IoTAllThingsEvent:
          Type: IoTRule
          Properties:
            Sql: "SELECT * FROM '$aws/events/thing/#'"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt RefreshTokensTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource: !GetAtt AccessTokensTable.Arn
            - Effect: Allow
              Action:
                - iot:ListThings
              Resource: '*'

  AlexaReportFunction:
    Type: AWS::Serverless::Function
    Condition: IsAlexaActive
    Properties:
      Handler: alexa/report.handler
      Environment:
        Variables:
          TABLE_REFRESH_TOKENS: !Ref RefreshTokensTable
          TABLE_ACCESS_TOKENS: !Ref AccessTokensTable
          ALEXA_CLIENT_ID: !Ref AlexaClientId
          ALEXA_CLIENT_SECRET: !Ref AlexaClientSecret
          ALEXA_ENDPOINT: !Ref AlexaEndpoint
      Events:
        IoTAllUpdateAccepted:
          Type: IoTRule
          Properties:
            Sql: "SELECT metadata, state.reported as state, topic(3) as thingName FROM '$aws/things/+/shadow/update/accepted' WHERE state.reported <> ''"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt RefreshTokensTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource: !GetAtt AccessTokensTable.Arn
            - Effect: Allow
              Action:
                - iot:DescribeEndpoint
                - iot:DescribeThing
                - iot:GetThingShadow
                - iot:UpdateThingShadow
              Resource: '*'

##
# Template Outputs
##

Outputs:
  OAuthClientId:
    Value: !Ref ClientId
    Description: OAuth2 - Client ID
  OAuthClientSecret:
    Value: !Ref ClientSecret
    Description: OAuth2 - Client Secret
  OAuthAuthorizationEndpoint:
    Value: !Sub 'https://${AuthEndpointApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/oauth2/authorization'
    Description: OAuth2 - Authorization Endpoint URL
  OAuthTokenEndpoint:
    Value: !Sub 'https://${AuthEndpointApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/oauth2/token'
    Description: OAuth2 - Token Endpoint URL

  GoogleHomeFulfillmentEndpoint:
    Value: !Sub 'https://${GoogleHomeEndpointApiGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}/google/fulfillment'
    Description: Google Home - Fulfillment Endpoint URL
    Condition: IsGoogleHomeActive

  AlexaLambdaARN:
    Value: !GetAtt AlexaFulfillmentFunction.Arn
    Description: Alexa - Fulfillment Lambda Function ARN
    Condition: IsAlexaActive
